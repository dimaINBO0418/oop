#include "stdafx.h"
#include <iostream>
#include <string>
#include<cmath>
#include<list>
using namespace std;

class Complex {
	double Re, Im;
public:

	Complex() {
		cout << "vvedite deystvitelnuyu chast" << endl;
		cin >> Re;
		cout << "vvedite mnimuyu chast" << endl;
		cin >> Im;

	}

	Complex(double im, double re) {
		this->Im = im;
		this->Re = re;
	}
	Complex(const Complex &other) {
		this->Re = other.Re;
		this->Im = other.Im;
	}
	~Complex() {};
	void set_c() {
		cout << "vvedite deystvitelnuyu chast" << endl;
		cin >> Re;
		cout << "vvedite mnimuyu chast" << endl;
		cin >> Im;
	}
	string get_c() {
		return to_string(Re) + "+" + to_string(Im) + "i";
	}
	double modul() {
		return sqrt(Re*Re + Im*Im);
	}
	double arg() {
		return atan(Im / Re);
	}
	friend istream& operator>> (std::istream &in, Complex &point)
	{
		cout << "vvedite deystvitelnuyu i mimuyu chast" << endl;
		in >> point.Re;

		in >> point.Im;


		return in;
	}
	friend ostream& operator<< (std::ostream &out, const Complex &point)
	{
		// поскольку operator<< является другом класса Point, то мы имеем прямой доступ к членам Point
		out << point.Re << "+i*" << point.Im;

		return out;
	}
	bool operator <(Complex &other) {
		if (this->modul() < other.modul())return true;
		else return false;
	}
	bool operator >(Complex &other) {
		if (this->modul() > other.modul())return true;
		else return false;
	}
	bool operator ==(Complex &other) {
		if (this->modul() == other.modul())return true;
		else return false;
	}

	Complex& operator ++() {
		this->Re++;
		return *this;
	}
	Complex& operator --() {
		this->Re--;
		return *this;
	}
};




int main()
{
	list<Complex> a;
	a.push_back(Complex());
	auto it = a.begin();
   
	int z=-1;
	do {
		cout << "vvedite 1 dlya dobavleniya 0-exit" << endl;
		
		cin >> z;
		if (z == 1)a.push_back(Complex());
	} while (z != 0);

	for (it = a.begin(); it != a.end();++it)cout << *it << endl;
	
	system("pause");
	return 0;
}